{"version":3,"sources":["LineChart.js","BarChart.js","DropDown.js","logo.svg","Header.js","App.js","reportWebVitals.js","index.js"],"names":["LineChart","props","detail","url","countryName","indicator","data","error","className","target","href","rel","style","width","height","margin","ResponsiveContainer","AreaChart","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","label","value","position","reversed","dataKey","YAxis","tickFormatter","Intl","NumberFormat","currency","maximumFractionDigits","format","CartesianGrid","strokeDasharray","Tooltip","formatter","Area","animationDuration","type","stroke","fillOpacity","fill","BarChartGraph","BarChart","Bar","DropDown","useState","countries","setCountries","pickedCountry","setPickedCountry","pickedCountryID","setPickedCountryID","countryData1","setCountryData1","countryData2","setCountryData2","countryData3","setCountryData3","indicator1","setIndicator1","indicator2","setIndicator2","indicator3","setIndicator3","errorCatch1","setError1","errorCatch2","setError2","errorCatch3","setError3","indicators","useEffect","axios","get","then","res","removeContinents","filter","country","region","catch","console","log","name","defaultValue","onChange","e","getCleanData","setData","setIndicator","setError","APIURL","countryData","removeEmptyYears","product","length","storeChoice","disabled","hidden","map","Header","src","logo","alt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b74da39d.chunk.js","sourcesContent":["import React from 'react';\n\nimport './index.css';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\n\nfunction LineChart(props) {\n  const { detail, url, countryName, indicator, data, error} = props;\n\n  return(\n    <div className=\"section-container\">\n        <div className={error}>\n            <div className=\"grid\">\n                <div className=\"text\">\n                    <h2 className=\"chart-header\">{countryName}</h2>\n                    <h2 className=\"\">{indicator}</h2>\n                    <p>{detail}</p>\n                    <a className=\"indicator-btn\" target=\"_blank\" href={url} rel=\"noreferrer\">More details &#10230;</a>\n                </div>\n\n                <div className=\"chart\">                    \n                    <p className=\"error-msg\">No data was taken in {countryName} for <span>{indicator}</span>.</p>\n\n                    <div className={error+\" chart-draw\"} style={{ width: '85%', height: 400, margin: '0 auto'}}>\n                        <ResponsiveContainer width=\"100%\" height={400}>\n                            <AreaChart width={730} height={400} data={data}\n                            margin={{ top: 10, right: 0, left: 20, bottom: 0 }}>\n                                <defs>\n                                    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                    <stop offset=\"5%\" stopColor=\"#3fbbf3\" stopOpacity={0.8}/>\n                                    <stop offset=\"95%\" stopColor=\"#3fbbf3\" stopOpacity={0.15}/>\n                                    </linearGradient>\n                                </defs>\n\n                                <XAxis\n                                    label={{ value: \"Year\", position: 'bottom' }}\n                                    reversed dataKey=\"date\" />\n\n                                <YAxis\n                                    // label={{ value: , position: 'top', offset:20 }}\n                                    tickFormatter={(value) => new Intl.NumberFormat('en-US', {\n                                    style: 'currency',\n                                    currency: 'USD',\n                                    maximumFractionDigits: 0,\n                                    }).format(value)}/>\n\n                                <CartesianGrid  \n                                    strokeDasharray=\"3 3\" />\n\n                                <Tooltip formatter={(value) => new Intl.NumberFormat('en-US', {\n                                    style: 'currency',\n                                    currency: 'USD',\n                                    maximumFractionDigits: 0,\n                                    }).format(value)}/>\n\n                                <Area animationDuration={1750} type=\"monotone\"      \n                                    dataKey=\"value\"       \n                                    stroke=\"#022d5b\" fillOpacity={1} fill=\"url(#colorUv)\" />\n                            </AreaChart>\n                        </ResponsiveContainer>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default LineChart;\n","import React from 'react';\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\n\nfunction BarChartGraph(props) {\n  const { detail, url, countryName, indicator, data, error} = props;\n\n  return(\n    <div className=\"section-container\">\n        <div className={error}>\n            <div className=\"grid\">\n                <div className=\"text\">\n                    <h2 className=\"chart-header\">{countryName}</h2>\n                    <h2>{indicator}</h2>\n                    <p>{detail}</p>\n                    <a className=\"indicator-btn\" target=\"_blank\" href={url} rel=\"noreferrer\">More details &#10230;</a>\n                </div>\n\n                <div className=\"chart\">                    \n                    <p className=\"error-msg\">No data was taken in {countryName} for <span>{indicator}</span>.</p>\n\n                    <div className=\"chart-draw\" style={{ width: '85%', height: 400, margin: '0 auto' }}>\n                        <ResponsiveContainer width=\"100%\" height={400}>\n                            <BarChart width={730} height={400} data={data}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis reversed dataKey=\"date\" />\n                            <YAxis\n                                    // label={{ value: , position: 'top', offset:20 }}\n                                    tickFormatter={(value) => new Intl.NumberFormat('en-US', {\n                                    }).format(value)}/>\n                            <Tooltip formatter={(value) => new Intl.NumberFormat('en-US', {\n                                    }).format(value)}/>\n                            {/* <Legend /> */}\n                            <Bar animationDuration={1750} dataKey=\"value\" fill=\"#022d5b\" />\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default BarChartGraph;\n","import React, { useState, useEffect } from 'react';\n// for API fetching\nimport axios from 'axios';\n// import chart components\nimport LineChart from './LineChart.js';\nimport BarChartGraph from './BarChart.js';\n\n\nfunction DropDown() {\n    // init states:\n    // $countries: list of all countries\n    // $pickedCountry: name of user-chosen country\n    // $pickedCountryID: ID of user-chosen country\n    const [countries, setCountries] = useState([]);\n    const [pickedCountry, setPickedCountry] = useState(\"\");\n    const [pickedCountryID, setPickedCountryID] = useState(false);\n    // $countryData1 & on: data for user-chosen country\n    const [countryData1, setCountryData1] = useState([]);\n    const [countryData2, setCountryData2] = useState([]);\n    const [countryData3, setCountryData3] = useState([]);\n    // $indicator1 & on: indicator\n    const [indicator1, setIndicator1] = useState(\"\");\n    const [indicator2, setIndicator2] = useState(\"\");\n    const [indicator3, setIndicator3] = useState(\"\");\n    // $errorCatch1 & on: error state to display error message\n    const [errorCatch1, setError1] = useState(false);\n    const [errorCatch2, setError2] = useState(false);\n    const [errorCatch3, setError3] = useState(false);\n\n    // indicators and descriptions for indicators\n    const indicators = [\n        'NY.GDP.MKTP.CD',\n        'EN.ATM.CO2E.PC',\n        'SL.GDP.PCAP.EM.KD'\n    ];\n    const detail1 = \"GDP at purchaser's prices is the sum of gross value added by all resident producers in the economy plus any product taxes and minus any subsidies not included in the value of the products.\";\n    const url1 = \"https://datatopics.worldbank.org/world-development-indicators/themes/economy.html\";\n\n    const detail2 = \"Carbon dioxide emissions are those stemming from the burning of fossil fuels and the manufacture of cement. They include carbon dioxide produced during consumption of solid, liquid, and gas fuels and gas flaring.\";\n    const url2 = \"https://datatopics.worldbank.org/world-development-indicators/themes/environment.html\";\n\n    const detail3 = \"GDP per person employed is gross domestic product (GDP) divided by total employment in the economy. Purchasing power parity (PPP) GDP is GDP converted to 2011 constant international dollars using PPP rates.\";\n    const url3 = \"https://datatopics.worldbank.org/world-development-indicators/themes/economy.html\";\n\n\n    // when component is about to mount, fetch the full country list\n    // and store the list in the 'countries' state\n    useEffect(() => {\n        axios.get('https://api.worldbank.org/v2/country?format=json')\n            .then(res => {\n                const countryList = res.data[1]; /* Used 1 due to object structure - [0] contains header/total information */\n\n                // remove continents disguised as countries\n                var removeContinents = countryList.filter(country => country.region.value !== \"Aggregates\");\n                \n                // and set state\n                setCountries(removeContinents);\n            })\n            .catch(error => console.log(error));\n    }, []);\n    \n\n    // on select change (user changes dropdown):\n    // (1) set errors to false\n    // (2) fetch, clean, and store data to states\n    const storeChoice = e => {\n        setPickedCountryID(e);\n\n        setError1(false);\n        setError2(false);\n        setError3(false);\n\n        function getCleanData(setData, setIndicator, setError, APIURL) {\n            axios.get('https://api.worldbank.org/v2/country/' + e + '/indicator/' + APIURL + '?format=json')\n            .then(res => {\n                const countryData = res.data[1]; // [0] contains header/total information\n                \n                // get country name for chart title and set state\n                setPickedCountry(countryData[0].country.value);\n\n                // get indicator for chart title and set state\n                setIndicator(countryData[0].indicator.value);\n\n                // remove entries that have no value and set state\n                const removeEmptyYears = countryData.filter(product => product.value !== null);\n                setData(removeEmptyYears);\n                \n                if(removeEmptyYears.length===0) {\n                    setError(true);\n                }\n                }\n            )\n            .catch(error => setError(true));\n        }\n\n        getCleanData(setCountryData1, setIndicator1, setError1, indicators[0]);\n        getCleanData(setCountryData2, setIndicator2, setError2, indicators[1]);\n        getCleanData(setCountryData3, setIndicator3, setError3, indicators[2]);\n    };\n\n    console.log(countryData2);\n    \n    return (\n        <div>\n            <div className=\"dropdown-container\">\n                { pickedCountryID ? \n                    <p>Pick another country:</p>\n                    : <p>Pick a country to start:</p> }\n\n                <select\n                    className=\"dropdown\"\n                    name=\"dropdown\"\n                    defaultValue={'none'}\n                    onChange={e => storeChoice(e.target.value)}>\n\n                    <option\n                        value=\"none\"\n                        disabled\n                        hidden>\n                    </option>\n\n                    { countries.map(country =>\n                        <option\n                            key={country.name}\n                            value={country.id}>\n                            {country.name}\n                        </option>)\n                    }\n                </select>\n            </div>\n            <div className=\"chart-container\">\n                { pickedCountryID ?\n                    <LineChart\n                    detail={detail1}\n                    url={url1}\n                    countryName={pickedCountry}\n                    indicator = {indicator1}\n                    data={countryData1}\n                    error={ errorCatch1 ? \n                        \"error-show\" : \"error-hide\" }>\n                    </LineChart>\n                : null }\n\n                { pickedCountryID ?\n                    <BarChartGraph\n                    detail={detail2}\n                    url={url2}\n                    countryName={pickedCountry}\n                    indicator = {indicator2}\n                    data={countryData2}\n                    error={ errorCatch2 ? \n                        \"error-show\" : \"error-hide\" }>\n                    </BarChartGraph>\n                : null }\n\n                { pickedCountryID ?\n                    <LineChart\n                    detail={detail3}\n                    url={url3}\n                    countryName={pickedCountry}\n                    indicator = {indicator3}\n                    data={countryData3}\n                    error={ errorCatch3 ? \n                        \"error-show\" : \"error-hide\" }>\n                    </LineChart>\n                : null }\n\n            </div>\n        </div>\n    );\n}\n\n\n\nexport default DropDown;","export default __webpack_public_path__ + \"static/media/logo.cc4315f9.svg\";","import React from 'react';\n\nimport logo from './logo.svg';\n\n\nconst Header = () => {\n    return(\n        <div className=\"header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <header className=\"App-header\">\n            <h1>\n                Country Explorer\n            </h1>\n            <p>\n                WorldBank API UI\n            </p>\n            </header>\n        </div>\n    );\n}\n\n\nexport default Header;","import './App.css';\nimport React from 'react';\nimport DropDown from './DropDown.js';\nimport Header from './Header.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <DropDown />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
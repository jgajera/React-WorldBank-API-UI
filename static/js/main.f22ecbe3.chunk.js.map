{"version":3,"sources":["Chart.js","DropDown.js","logo.svg","Header.js","App.js","reportWebVitals.js","index.js"],"names":["Chart","props","data","error","country","countrySet","console","log","useState","pickedCountry","errorCatch","indicator","undefined","axios","get","then","res","countryData","value","removeEmptyYears","filter","product","state","catch","className","style","width","height","margin","ResponsiveContainer","AreaChart","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","label","position","reversed","dataKey","YAxis","tickFormatter","Intl","NumberFormat","currency","maximumFractionDigits","format","CartesianGrid","strokeDasharray","Tooltip","formatter","Area","type","stroke","fillOpacity","fill","DropDown","countries","pickedCountryID","removeContinents","region","setState","e","this","countryName","errorSet","name","defaultValue","onChange","event","storeChoice","target","disabled","hidden","map","countryID","React","Component","Header","src","logo","alt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f22ecbe3.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport './index.css';\nimport { AreaChart, Area, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport axios from 'axios';\n\n\nfunction Chart(props) {\n  const { data, error, country, countrySet } = props;\n  console.log(props.countrySet)\n\n  const [pickedCountry, errorCatch] = useState(false);\n  const [countryData] = useState([]);\n  const [indicator] = useState(\"\");\n\n\n  if(props.countrySet!==undefined) {\n    axios.get('https://api.worldbank.org/v2/country/' + props.countrySet + '/indicator/DT.ODA.ALLD.CD?format=json')\n    .then(res => {\n        const countryData = res.data[1]; // [0] contains header/total information\n        pickedCountry(countryData[0].country.value);\n\n        // remove entries that have no value and set state\n        var removeEmptyYears = countryData.filter(product => product.value !== null);\n        countryData(removeEmptyYears);\n        \n        console.log(this.state.countryData);\n\n        // get indicator for chart title and set state\n        var indictor = this.state.countryData[0].indicator.value;\n        indicator(indicator);\n        }\n    )\n    .catch(error => errorCatch(true));\n}\n\n\n  return(\n    <div className=\"chart-container\">\n        <div className={errorCatch}>\n            <p className=\"error-msg\">No data for this country. Choose another country!</p>\n            <p className=\"explore-header\">{props.country}</p>\n\n            <div className=\"chart-draw\" style={{ width: '80%', height: 300, margin: '0 auto' }}>\n                <ResponsiveContainer>\n                    <AreaChart width={730} height={250} data={data}\n                    margin={{ top: 10, right: 0, left: 50, bottom: 0 }}>\n                        <defs>\n                            <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#3fbbf3\" stopOpacity={0.8}/>\n                            <stop offset=\"95%\" stopColor=\"#3fbbf3\" stopOpacity={0.15}/>\n                            </linearGradient>\n                        </defs>\n\n                        <XAxis                     \n                            label={{ value: \"Year\", position: 'bottom' }}\n                            reversed dataKey=\"date\" />\n\n                        <YAxis\n                            label={{ value: \"GDP ($)\", position: 'top', offset:20 }}\n                            tickFormatter={(value) => new Intl.NumberFormat('en-US', {\n                            style: 'currency',\n                            currency: 'USD',\n                            maximumFractionDigits: 0,\n                            }).format(value)}/>\n\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n\n                        <Tooltip formatter={(value) => new Intl.NumberFormat('en-US', {\n                            style: 'currency',\n                            currency: 'USD',\n                            maximumFractionDigits: 0,\n                            }).format(value)}/>\n\n                        <Area type=\"monotone\" dataKey=\"value\"       \n                            stroke=\"#022d5b\" fillOpacity={1} fill=\"url(#colorUv)\" />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n\n        </div>\n\n    </div>\n  );\n}\n\nexport default Chart;\n","import React from 'react';\n\nimport axios from 'axios';\n\nimport Chart from './Chart.js';\n// import { getDefaultNormalizer } from '@testing-library/dom';\n\n\nexport default class DropDown extends React.Component {\n    state = {\n        countries: [],\n        pickedCountryID: false, // set this to false to conditionally hide sections until user chooses country\n        countryData: [],\n        indicator: \"\",\n        errorCatch: false // set this to false to conditionally hide error message until API response comes back with success\n    }\n\n    componentDidMount() {\n        axios.get('https://api.worldbank.org/v2/country?format=json')\n            .then(res => {\n                const countries = res.data[1]; /* Used 1 due to object structure - [0] contains header/total information */\n                console.log(countries)             \n\n                // remove continents disguised as countries and set state\n                var removeContinents = countries.filter(country => country.region.value !== \"Aggregates\");\n                this.setState({ countries : removeContinents});\n\n                // console.log(countries)             \n            })\n    }\n\n    storeChoice(e) {\n        this.setState({ pickedCountryID: e });\n        this.setState({ errorCatch : false});\n        // if(e!==\"\") {\n        //     axios.get('https://api.worldbank.org/v2/country/' + e + '/indicator/DT.ODA.ALLD.CD?format=json')\n        //     .then(res => {\n        //         const countryData = res.data[1]; // [0] contains header/total information\n        //         this.setState({ pickedCountryID: countryData[0].country.value });\n\n        //         // remove entries that have no value and set state\n        //         var removeEmptyYears = countryData.filter(product => product.value !== null);\n        //         this.setState({ countryData : removeEmptyYears});\n                \n        //         console.log(this.state.countryData);\n\n        //         // get indicator for chart title and set state\n        //         var indictor = this.state.countryData[0].indicator.value;\n        //         this.setState({ indicator : indictor});\n        //         }\n        //     )\n        //     .catch(error => this.setState({ errorCatch : true}));\n        // }\n    }\n\n    render() {     \n        var countryName = this.state.pickedCountry;\n        var indicator = this.state.indicator;\n        var countryData = this.state.countryData;\n        var countrySet = this.state.pickedCountryID;\n        var errorSet = this.state.errorCatch;\n\n        return (\n            <div>\n                <div className=\"dropdown-container\">\n                    { countrySet ? \n                        <p>Pick another country:</p>\n                        : <p>Pick a country to start:</p> }\n\n                    <select\n                        className=\"dropdown\"\n                        name=\"dropdown\"\n                        defaultValue={'none'}\n                        onChange={(event)=>this.storeChoice(event.target.value)}>\n\n                        <option\n                            value=\"none\"\n                            disabled\n                            hidden>\n                        </option>\n\n                        { this.state.countries.map(country =>\n                            <option\n                                key={country.name}\n                                value={country.id}>\n                                {country.name}\n                            </option>)\n                        }\n                    </select>\n                </div>\n                <div className=\"chart-container\">\n                    { countrySet ?\n                        <Chart\n                            country={countryName}\n                            countryID={countrySet}\n                            indicator = {indicator}\n                            data={countryData}\n                            error={ errorSet ? \n                                \"error-show\" : \"error-hide\" }>\n                        </Chart>\n                    : null }\n                </div>\n            </div>\n        )\n    }\n}\n\n","export default __webpack_public_path__ + \"static/media/logo.cc4315f9.svg\";","import React from 'react';\n\nimport logo from './logo.svg';\n\n\nconst Header = () => {\n    return(\n        <div className=\"header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <header className=\"App-header\">\n            <h1>\n                Country Explorer\n            </h1>\n            <p>\n                WorldBank API UI\n            </p>\n            </header>\n        </div>\n    );\n}\n\n\nexport default Header;","import './App.css';\nimport React from 'react';\nimport DropDown from './DropDown.js';\nimport Chart from './Chart.js';\nimport Header from './Header.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <DropDown>\n        <Chart />\n      </DropDown>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}